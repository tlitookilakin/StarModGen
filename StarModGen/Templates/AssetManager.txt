{%- if Entry.Space -%}
namespace {{Entry.Space}};
{% endif -%}

partial class {{Entry.Type}}
{
	{%- for asset in Assets %}
	private global::StardewModdingAPI.IAssetName _nameof_{{asset.VarName}} = null!;
	{%- endfor %}
	{%- for include in IncludeSources %}
	private readonly global::System.Action<global::StardewModdingAPI.IAssetData> _include_{{include[1]}}
		= StarModGen.Utils.AssetHelper.BindInclude("{{include[0]}}");
	{%- endfor %}
	{%- for prop in LocalProps %}
	private {{prop.PropType}}? _{{ prop.Prop }} = null;
	{{prop.access}}partial {{prop.PropType}} {{prop.Prop}}
		=> _{{prop.Prop}} ??= global::StardewValley.Game1.content.Load<{{prop.PropType}}>({{prop.RawAsset}});
	{% endfor %}

	{{Entry.access}}partial void {{Entry.Method}}(StardewModdingAPI.IModHelper helper)
	{
		StarModGen.Utils.AssetHelper.Init(helper);
		helper.Events.Content.AssetsInvalidated += _AssetsInvalidatedImpl;
		helper.Events.Content.AssetRequested += _AssetRequestedImpl;
		{% for asset in Assets %}
		_nameof_{{asset.VarName}} = helper.GameContent.ParseAssetName({{asset.Target}});
		{%- endfor %}
	}

	private void _AssetsInvalidatedImpl(object? sender, StardewModdingAPI.Events.AssetsInvalidatedEventArgs e)
	{
		foreach (var name in e.NamesWithoutLocale) 
		{
			{%- for asset in Assets -%}
			{%- if asset.Prop and asset.isProperty %}
			{% unless forloop.first -%}else {% endunless -%}
			if (name.Equals(_nameof_{{asset.VarName}})) 
			{
				_{{asset.Prop.Prop}} = null;
				{%- if Entry.IsNotify %}
				PropertyChanged?.Invoke(this, new(nameof({{asset.Prop.Prop}})));
				{%- endif %}
			}
			{%- endif %}
			{%- endfor %}
		}
	}

	private void _AssetRequestedImpl(object? sender, StardewModdingAPI.Events.AssetRequestedEventArgs e)
	{
		var name = e.NameWithoutLocale;

		{% for asset in Assets %}
		{%- if asset.HasAnyHandlers -%}
		{%- unless forloop.first -%}else {% endunless -%}
		if (name.Equals(_nameof_{{asset.VarName}}))
		{
			{% if asset.Prop.Local -%}
			e.LoadFromModFile<{{asset.Prop.PropType}}>("{{asset.Prop.Local}}", StardewModdingAPI.Events.AssetLoadPriority.Medium);
			{%- elsif asset.Load -%}
			e.LoadFrom({{asset.Load.Method}}, global::StardewModdingAPI.Events.AssetLoadPriority.Medium);
			{%- endif -%}
			{%- for include in asset.Includes -%}
			e.Edit(_include_{{include.SourceVar}});
			{%- endfor -%}
			{%- for edit in asset.Edits -%}
			e.Edit({{edit.Method}});
			{%- endfor %}
		}
		{% endif -%}
		{% endfor %}
	}
}