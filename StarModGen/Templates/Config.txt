namespace {{Type.space}};

partial class {{Type.type}}
{
	[EditorBrowsable(EditorBrowsableState.Never)]
	private StardewModdingAPI.IModHelper _helper = null!;
	[EditorBrowsable(EditorBrowsableState.Never)]
	private StardewModdingAPI.IManifest _manifest = null!;

	{%- for prop in Props -%}
	{%- if prop.HasRange and prop.Range.partial %}

	public partial {{prop.Prop.typeName}} {{prop.Prop.name}} 
	{
		get => _{{prop.Prop.name}};
		set => _{{prop.Prop.name}} = 
		{%- if prop.Prop.type == "Float" %} (float) {%- endif %}
		{%- if prop.Range.Min != "null" %} Math.Max({{prop.Range.min}},
		{%- endif -%}
		{%- if prop.Range.Max != "null" %} Math.Min({{prop.Range.max}},
		{%- endif %} value
		{%- if prop.Range.Step != "null" %} - (value % {{prop.Range.step}}) {%- endif -%}
		{%- if prop.Range.Min != "null" -%} ) {%- endif -%}
		{%- if prop.Range.Max != "null" -%} ) {%- endif -%}
		;
	}
	[EditorBrowsable(EditorBrowsableState.Never)]
	private {{prop.Prop.typeName}} _{{prop.Prop.name}};
	{%- endif -%}
	{%- endfor %}

#pragma warning disable CS8618
	public {{Type.type}}()
	{
		_SetDefaults();
	}
#pragma warning restore CS8618

	[EditorBrowsable(EditorBrowsableState.Never)]
	private void _SetDefaults()
	{
		{%- for prop in Props %}
		{{prop.Prop.name}} = {{prop.Prop.defaultValue}};
		{%- endfor %}
		Reset?.Invoke(this);
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	private void _Reset()
	{
		_SetDefaults();
		Reset?.Invoke(this);
	}

	///<summary>
	///Creates or reads a new config instance and registers it with GMCM if possible. <br/>
	///Use this instead of creating or reading a config directly.
	///</summary>
	///<param name="helper">Your mod's ModHelper</param>
	///<param name="manifest">Your mod's Manifest</param>
	internal static partial {{Type.type}} Create(StardewModdingAPI.IModHelper helper, StardewModdingAPI.IManifest manifest)
	{
		var cfg = helper.ReadConfig<{{Type.type}}>();
		cfg._helper = helper;
		cfg._manifest = manifest;

		if (helper.ModRegistry.IsLoaded("spacechase0.GenericModConfigMenu"))
			helper.Events.GameLoop.GameLaunched += cfg._Register;

		return cfg;
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	private void _Apply()
	{
		Applied?.Invoke(this);
	}

	[EditorBrowsable(EditorBrowsableState.Never)]
	private void _Register(object? s, StardewModdingAPI.Events.GameLaunchedEventArgs ev)
	{
		var gmcm = _helper.ModRegistry.GetApi<StarModGen.Utils.IGMCMApi>("spacechase0.GenericModConfigMenu")!;
		var i18n = _helper.Translation;

		gmcm.Register(_manifest, _Reset, _Apply, {{Type.titleOnly}});
		Registering?.Invoke(this, gmcm);

		{%- for page in Pages %}

		{% if page -%}
			gmcm.AddPage(_manifest, "{{page}}", () => i18n.Get("config.page.{{page}}.name"));
		{%- else -%}
			gmcm.AddPage(_manifest, "");
		{%- endif -%}
		{%- for prop in page %}
		{% case prop.Prop.type %}
			{%- when "Bool" -%} gmcm.AddBoolOption(
			{%- when "String" or "Enum" -%} gmcm.AddTextOption(
			{%- when "Int" or "Float" -%} gmcm.AddNumberOption(
			{%- when "KeyBind" -%} gmcm.AddKeybind(
			{%- when "KeyBindList" -%} gmcm.AddKeybindList(
		{% endcase %}
			{%- if prop.Prop.type == "Enum" -%}
			_manifest, () => {{prop.Prop.name}}.ToString(), 
			v => {{prop.Prop.name}} = Enum.TryParse<{{prop.Prop.typeName}}>(v, true, out var p) ? p : {{prop.Prop.name}},
			() => i18n.Get("config.{{prop.Prop.name}}.name"), () => i18n.Get("config.{{prop.Prop.name}}.desc"),
			Enum.GetNames<{{prop.Prop.typeName}}>(), s => i18n.Get($"config.{{prop.Prop.simpleType}}.{s}"),
			{%- else -%}
			_manifest, () => {{prop.Prop.name}}, v => {{prop.Prop.name}} = v,
			() => i18n.Get("config.{{prop.Prop.name}}.name"), () => i18n.Get("config.{{prop.Prop.name}}.desc"),
			{%- endif %}
			{%- if prop.HasRange %}
			{%- if prop.Prop.type == "Int" %}
			min: {{prop.Range.min}}, max: {{prop.Range.max}}, interval: {{prop.Range.step}},
			{%- elsif prop.Prop.type == "Float" %}
			min: {{prop.Range.min}}f, max: {{prop.Range.max}}f, interval: {{prop.Range.step}}f,
			{%- endif %}
			{%- endif %}
			fieldId: "{{prop.Prop.name}}"
		);
		{%- endfor %}
		{%- endfor %}

		gmcm.AddPage(_manifest, "");
		{%- for page in Pages -%}
		{%- if page %}
		gmcm.AddPageLink(_manifest, "{{page}}", () => i18n.Get("config.page.{{page.Key}}.name"), () => i18n.Get("config.page.{{page}}.desc"));
		{%- endif -%}
		{%- endfor %}

		Registered?.Invoke(this, gmcm);
	}
}